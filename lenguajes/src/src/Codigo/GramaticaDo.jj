//Opciones predeterminadas para realizar la compilacion del archivo

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 1;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
  COMMON_TOKEN_ACTION=true;///Realizar Evento Cada vez que se encuentra un Token

}

PARSER_BEGIN(Analizador)

package co.edu.cuc.analizador;
public class Analizador {


}

PARSER_END(Analizador)

//Variable que determina como se dara la invocacion de cada Token
TOKEN_MGR_DECLS : {
	//Entran los tokens
    java.util.List<Token> listaToken=new java.util.LinkedList<Token>();
    void CommonTokenAction(Token t){
        listaToken.add(t);
    }
    //Retornamos la lista con tokens
    public java.util.List<Token> getListaToken(){
        return listaToken;
    }
}
SKIP:{
    " "    
    |"\n"
    |"\r"
    |"\t"
}
TOKEN:{
    <Do:"Do">
    |<While:"while">
}
TOKEN:{
    < LBRACE:"(">
    | <RBRACE:")">
    | <COMA:",">
    | <LKEY:"{">
    | <RKEY:"}">
    | <SEMICOLON: ";" >
}
TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < GT: ">" >
| < EQ: "==" >
| < NE2: "!" >
| < NE: "!=" >
| < LE: "<=" >
| < GE: ">=" >
| < OR: "||" >
| < AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}
TOKEN:{
   < VARNUM: "#"(["_", "0"-"9", "a"-"z","A"-"Z"])+>
 | < VARCAD: "$"(["_", "0"-"9", "a"-"z","A"-"Z"])+>
 | < NUM: (<INTEGER_LITERAL>|<FLOATING_POINT_LITERAL>)>
 | < INTEGER_LITERAL: (["0"-"9"])+>      
 |
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["0"-"9"]))* "." (["0"-"9"])+ (<EXPONENT>)?
      | "." (["0"-"9"])+(<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}
/* INICIO DE ANALISIS */
void Input() :
{}
{
    (DoWhile())+<EOF>
}
void DoWhile():
{}
{
    <Do>
        <LKEY>
            (Sentencia())*
        <RKEY>
    <While><LBRACE>ComparacionExpr()<RBRACE><SEMICOLON>
}
void Sentencia():
{}
{
    SinSentencia()
    |Asignacion()
    |DoWhile()
}
void SinSentencia() :
{}
{
  <SEMICOLON>
}
void Asignacion():{}
{
    (
     <VARNUM>(<ASSIGN>SumExpr())?
    |<VARCAD>(<ASSIGN>(<STRING_LITERAL>|<VARCAD>)(<PLUS>(<STRING_LITERAL>|<VARCAD>))*)?
    )
    <SEMICOLON>
}
////////////OPERACIONES ARITMETICAS
void SumExpr() :{}
{
	UnOp() ProdExpr() ( SumOp() ProdExpr() )*
}
void ProdExpr() :{}
{
	Factor() ( MultOp() UnOp() Factor() )*  
}
void Factor() :{}
{//UN FACTOR PUEDE SER UN NUMERO, OTRA VARIABLE NUMERO U OTRA EXPRESION
	( <VARNUM>
         |<NUM> | <LBRACE>  SumExpr() <RBRACE> 
        )
}
void UnOp() :
{ }
{
  (<MINUS>|<PLUS>)?
}
void SumOp() :
{ }
{
    <MINUS>(<PLUS>)? 
  | <PLUS>(<MINUS>)?
}	
void MultOp() :
{ }
{//MULTIPLICACION O DIVISION
  ( <STAR> |<SLASH>)
}

////OPERACIONES RELACIONALES
void ComparacionExpr() :
{ }
{
  AndExpr() ( <OR>  AndExpr()  )*
}

void AndExpr() :
{ }
{
  RelExpr() ( <AND> RelExpr()  )*
}

void RelExpr() :
{ }
{
  LOOKAHEAD(
  [<NE2>]<LBRACE>ComparacionExpr()
  ) 
  [<NE2>]<LBRACE>ComparacionExpr()<RBRACE>
| 
  (SumExpr() (RelOp() SumExpr()) )
}

void RelOp() :
{}
{
   <EQ> 
 | <NE> 
 | <GT> 
 | <GE> 
 | <LT> 
 | <LE> 
}	
